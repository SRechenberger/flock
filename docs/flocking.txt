-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


@package flocking
@version 0.1.0.1

module Flock
type Behavior a = ReaderT Plane (StateT Agent (Rand StdGen)) a
runBehavior :: Behavior a -> StdGen -> Plane -> Agent -> (a, Agent, StdGen)

-- | Agents are circular autonomous mobile objects, searching of there
--   destination.
data Agent
Agent :: Point -> Float -> Vector -> Float -> Distance -> Bool -> Bool -> Agent

-- | Position of the agent on the plane
[_agentPosition] :: Agent -> Point

-- | Radius of the agent
[_agentRadius] :: Agent -> Float

-- | Direction, in which the agent is heading
[_agentDirection] :: Agent -> Vector

-- | Speed at which the agent is moving
[_agentSpeed] :: Agent -> Float

-- | Sensor range of the agent
[_agentSensorRange] :: Agent -> Distance

-- | Is the agent in a flock?
[_agentFlocking] :: Agent -> Bool

-- | Is the agent or its flock at its destination?
[_agentAtDest] :: Agent -> Bool

-- | Constructs an agent
mkAgent :: Point -> Float -> Vector -> Float -> Distance -> Agent

-- | Moves an agent, according to its state;
move :: Behavior ()

-- | Scans the plane around an agent, returning all agents and obstacles
--   withing it's sensor range
scan :: Behavior ([Agent], [Obstacle])

-- | Turns an agent by an angle
turn :: Angle -> Behavior ()

-- | Lets the agent directly head to a specific point.
turnTowards :: Point -> Behavior ()
turnAway :: Point -> Behavior ()
agentPosition :: Lens' Agent Point
agentRadius :: Lens' Agent Float
agentDirection :: Lens' Agent Vector
agentSpeed :: Lens' Agent Float
agentSensorRange :: Lens' Agent Distance
agentFlocking :: Lens' Agent Bool
agentAtDest :: Lens' Agent Bool

-- | Obstacles are circular objects, which can not be passed by any agent.
data Obstacle
Obstacle :: Point -> Float -> Obstacle

-- | The position of the obstacle on the plane
[_obstPosition] :: Obstacle -> Point

-- | The radius of the obstacle
[_obstRadius] :: Obstacle -> Float
obstRadius :: Lens' Obstacle Float
obstPosition :: Lens' Obstacle Point
data Plane
Plane :: [Agent] -> [Obstacle] -> Plane
[_planeAgents] :: Plane -> [Agent]
[_planeObstacles] :: Plane -> [Obstacle]

-- | Simulates the plane by one step according to a function, which defines
--   the behavior of an agent in the plane.
step :: (Plane -> Agent -> Agent) -> Plane -> Plane

-- | As step, but in a random monad.
stepR :: (Plane -> Agent -> Rand g Agent) -> Plane -> Rand g Plane
planeObstacles :: Lens' Plane [Obstacle]
planeAgents :: Lens' Plane [Agent]
type Angle = Float
type Distance = Float
class Render a
render :: Render a => Plane -> a -> Picture
dist :: Point -> Point -> Float

-- | Checks, whether two objects collide.
collidesWith :: (IsObject a, IsObject b) => a -> b -> Bool

-- | Calculates the edge-to-edge-distance between two objects.
distance :: (IsObject a, IsObject b) => a -> b -> Distance

-- | Returns the Angle between the direction vector and the vector between
--   the agent and another object;
--   
--   ATTENTION! The angle returned is symmetrical for both sides; i.e.: if
--   the angle is, e.g., PI/2, it is either 90 Degrees on the left or on
--   the right side.
angle :: (IsObject a) => Agent -> a -> Angle

-- | Checks, whether a give object is on the <tt>left</tt> side of the
--   agent.
isOnLeft :: (IsObject a) => Agent -> a -> Bool

-- | Checks, whether a give object is on the <tt>right</tt> side of the
--   agent.
isOnRight :: (IsObject a) => Agent -> a -> Bool

-- | Scans only in a certain direction, with a certain field of view
scanD :: Angle -> Angle -> Behavior ([Agent], [Obstacle])
lookThere :: (IsObject a) => Angle -> Angle -> Agent -> a -> Bool

-- | A class of objects in the simulated plane.
class IsObject obj

-- | Returns the radius of an object.
radius :: IsObject obj => obj -> Float

-- | Returns the position of an object.
position :: IsObject obj => obj -> Point
instance Flock.IsObject Flock.Obstacle
instance Flock.IsObject Flock.Agent
instance Flock.Render Flock.Agent
instance Flock.Render Flock.Obstacle
instance Flock.Render Flock.Plane
instance GHC.Classes.Eq Flock.Plane
instance GHC.Show.Show Flock.Plane
instance GHC.Classes.Eq Flock.Obstacle
instance GHC.Show.Show Flock.Obstacle
instance GHC.Classes.Eq Flock.Agent
instance GHC.Show.Show Flock.Agent

module Simulation

-- | Runs the simulation in a window, given the window size, a plane, to
--   simulate and a behavior function.
runSim :: Int -> Int -> Integer -> Plane -> Behavior () -> IO ()
instance GHC.Show.Show Simulation.SimState
